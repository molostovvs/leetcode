General:
[O(x), O(y)] where O(x) - time, O(y) - space
_ prefix means that i cope with the task, but there was a better solution
__ prefix means that i did not cope with the task myself
>> next attempt took X min
/ for follow-ups or alternatives
X_ prefix for bad questions that i didnt want to solve

1480. Running Sum of 1d Array - 5min
__724. Find Pivot Index - 100 min (spied solution)
205. Isomorphic Strings - 25 min
392. Is Subsequence - 11 min
1523. Count Odd Numbers in an Interval Range - 15 min >> 3 min [O(1), O(1)]
1491. Average Salary Excluding the Minimum and Maximum Salary - 6 min
217. Contains Duplicate - 2 min >> 1 min
1. Two Sum - 5 min (another 10 min for O(n) solution) >> 30 min (spied) >> 7 min [O(n), O(n)] >> 30 min (spied) [O(n), O(n)]
__53. Maximum Subarray - 40 min (spied solution) >> 8 min [O(n), O(1)]
__21. Merge Two Sorted Lists - 50 min (spied solution) >> 8 min >> 12 min [O(n+m), O(1)]
206. Reverse Linked List - 83 min >> 10 min [O(n), O(1)] >> 5 min
__191. Number of 1 Bits - 20 min (googled library solution) - 80 min (watched youtube video for all possible solutions) >> 2 min [O(n), O(1)]
1281. Subtract the Product and Sum of Digits of an Integer - 16 min
88. Merge Sorted Array - 15 min / 35 min (youtube video for time O(n) and space O(1))
876. Middle of the Linked List - 8 min >> 5 min >> 1 min
_142. Linked List Cycle II - naive 8 min [time O(n), space O(n)] / 110 min (after several youtube videos) [time O(n), space O(1)]
976. Largest Perimeter Triangle - 20 min [time O(n + n*logn), space O(1)]
1779. Find Nearest Point That Has the Same X or Y Coordinate - 8 min [time O(n), space O(1)]
350. Intersection of Two Arrays II - 28 min [time O(n*m^2?), space O(m)] / 40 min (after googling) this algorithm is better for sorted arrays [time O(n*logn + m*logm), space O(sorting)] and when sorted [time O(n + m), space O(1)] / 40 min (after spying another solutions) [time O(n+m), space O(n)] >> 8 min [O(nlogn + mlogm), O(sorting)]
121. Best Time to Buy and Sell Stock - 100 min [time O(n), space O(1)] / 10 min (for optimized variables) [time O(n), space O(1)] >> 5 min >> 10 min [O(n), O(n)]
409. Longest Palindrome - 25 min [time O(n), space O(1)]
1822. Sign of the Product of an Array - 13 min [O(n), O(1)]
1502. Can Make Arithmetic Progression From Sequence - 4 min [O(nlogn + n), O(sorting)]
_202. Happy Number - 20 min [O(log n), O(log n)] / 55 min [O(log n), O(1)]
1790. Check if One String Swap Can Make Strings Equal - 25 min [O(n), O(1)] / 12 min (checked solution without list) [O(n), O(1)]
566. Reshape the Matrix - 35 min [O(n*m), O(1)]
118. Pascal's Triangle - 45 min [O(n^2), O(1)] >> 3 min [O(n^2), O(1)]
589. N-ary Tree Preorder Traversal - 10 min for recursive algorithm [O(n), O(1)] / 40 min for iterative algorithm with linked list[O(n), O(n)] / 5 min for iterative with stack (after viewing the solution) [O(n), O(n)]
102. Binary Tree Level Order Traversal - 15 min [O(n), O(n)] >> 12 min [O(n), O(n)]
_496. Next Greater Element I - 15 min brute force [O(n + m*m), O(1)] / 50 min (spied) for [O(n+m), O(n)]
1232. Check If It Is a Straight Line - 40 min [O(n), O(1)]
36. Valid Sudoku - 40 min [O(n?), O(n)]
74. Search a 2D Matrix - 60 min [O(log (n*m)), O(1)] >> 6 min
__704. Binary Search - 30 min (googled) [O(log n), O(1)] >> 10 min [O(log n), O(1)] >> 2 min
278. First Bad Version - 10 min [O(log n), O(1)] >> 3 min [O(log n), O(1)] >> 1 min
387. First Unique Character in a String - 20 min [O(n), O(1)]
383. Ransom Note - 5 min [O(logn), O(1)]
_242. Valid Anagram - 8 min [O(n+m), O(n+m)] / 30 min (googled) [O(slog s + tlog t), O(1)]
__1588. Sum of All Odd Length Subarrays - 40 min (googled) [O(n), O(1)]
283. Move Zeroes - 20 min [O(n), O(1)] / 20 min - less code (googled) [O(n), O(1)] >> minimum operations [O(n), O(1)]
1672. Richest Customer Wealth - 2 min [O(n), O(1)]
__974. Subarray Sums Divisible by K - 70 min (googled) [O(n), O(n)]
__98. Validate Binary Search Tree - 90 min [O(n), O(h)] >> 5 min [O(n), O(h)]
_235. Lowest Common Ancestor of a Binary Search Tree - 30 min [O(n+h), O(n+h)] / 20 min (googled) [O(logn), O(h)] >> 6 min [O(log n), O(h)]
1572. Matrix Diagonal Sum - 10 min [O(n), O(1)]
141. Linked List Cycle - 10 min [O(n), O(1)]
21. Merge Two Sorted Lists - 10 min [O(n + m), O(1)]
__203. Remove Linked List Elements - 80 min [O(n), O(1)]
__491. Non-decreasing Subsequences - cant understand this now
__49. Group Anagrams - 90 min [O(n), O(n)]
_347. Top K Frequent Elements - 5 min [O(n + n logn), O(n)] / 30 min [O(n), O(n)]
733. Flood Fill - 30 min [O(n*m), O(n*m)] >> 50 min (nice looking linq)
200. Number of Islands - 20 min [O(n*m), O(n*m)]
1768. Merge Strings Alternately - 5 min [O(n+m), O(n+m)]
1678. Goal Parser Interpretation - 5 min [O(n), O(n)]
389. Find the Difference - 5 min [O(s+t), O(s)] / 10 min [O(s+t), O(1)]
83. Remove Duplicates from Sorted List - 30 min [O(n), O(1)]
709. To Lower Case - 5 min [O(n), O(n)]
1309. Decrypt String from Alphabet to Integer Mapping - 15 min [O(n), O(n)]
953. Verifying an Alien Dictionary - 25 min [O(n), O(alphabet)] >> 10 min
509. Fibonacci Number - 5 min [O(n), O(1)] >> 4 min
__70. Climbing Stairs - 80 min [O(n), O(n)] / 10 min [O(n), O(1)] >> 13 min [O(n), O(1)] >> 2 min
20. Valid Parentheses  - 10 min [O(n), O(n)] >> 5 min >> 5 min
232. Implement Queue using Stacks - 20 min [O(n^2), O(n)] but amortized time is O(1)
_1290. Convert Binary Number in a Linked List to Integer - 10 min [O(n), O(n)] / 10 min [O(n), O(1)]
104. Maximum Depth of Binary Tree - 10 min [O(n), O(h)] >> 2 min [O(n), O(h)] >> 3 min
404. Sum of Left Leaves - 40 min [O(n), O(h)]
746. Min Cost Climbing Stairs - 10 min [O(n), O(n)] / 10 min [O(n), O(1)] >> 24 min [O(n), O(1)]
62. Unique Paths - 40 min [O(n*m), O(n*m)]
144. Binary Tree Preorder Traversal -  10 min recursive [O(n), O(n)] / 10 min iteratively [O(n), O(n)]
_94. Binary Tree Inorder Traversal - 10 min recursively [O(n), O(n)] / 40 min (googled) [O(n), O(n)]
_145. Binary Tree Postorder Traversal - 5 min recursively [O(n), O(n)] / 40 min (googled) [O(n), O(n)]
_238. Product of Array Except Self - 30 min [O(n), O(n)] / 30 min (googled) [O(n), O(1)]
1356. Sort Integers by The Number of 1 Bits - 10 min [O(nlog n), O(n?)]
__438. Find All Anagrams in a String - 85 min [O(n), O(1)] >> 8 min
__424. Longest Repeating Character Replacement - 90 min [O(n), O(alphabet)]
101. Symmetric Tree - 10 min recursively [O(n), O(n)], 5 min iteratively [O(n), O(n)]
1603. Design Parking System - 5 min [O(n), O(n)] / 5 min [O(n), O(1)]
303. Range Sum Query - Immutable - 5 min [O(n), O(n)]
299. Bulls and Cows - 25 min [O(n), O(alphabet)]
226. Invert Binary Tree - 20 min [O(n), O(h)] >> 3 min
112. Path Sum - 10 min [O(n), O(n)]
_155. Min Stack - 30 min [O(n), O(2n)] / 10 min checked hint [O(n), O(n)]
150. Evaluate Reverse Polish Notation - 15 min [O(n), O(operations)]
__22. Generate Parentheses - 70 min [O(?), O(?)]
__739. Daily Temperatures - 60 min [O(n), O(n)]
_844. Backspace String Compare - 2 min [O(s + t), O(s + t)] / 60 min [O(n), O(1)]
__394. Decode String - 70 min UNABLE TO SOLVE
700. Search in a Binary Search Tree - 2 min [O(log n), O(h)]
701. Insert into a Binary Search Tree - 12 min [O(logn), O(h)]
374. Guess Number Higher or Lower - 6 min [o(log n), O(1)]
35. Search Insert Position - 14 min [O(log n), O(1)] >> 5 min
852. Peak Index in a Mountain Array - 20 min [O(log n), O(1)]
125. Valid Palindrome - 17 min [O(n), O(n)] >> 10 min [O(n), O(1)]
167. Two Sum II - Input Array Is Sorted - 10 min [O(n), O(1)] >> 3 min >> 10 min
__15. 3Sum - 70 min (googled) [O(n^2), O(1)]
11. Container With Most Water - 30 min [O(n), O(1)]
367. Valid Perfect Square - 30 min [O(log n), O(1)] >> 3 min [O(log n), O(1)]
_1385. Find the Distance Value Between Two Arrays - 
15 min [O(n^2), O(1)] / 10 min [O(n log n), O(1)]
__1046. Last Stone Weight - 40 min [O(n log n), O(n)]
692. Top K Frequent Words - 10 min [O(n log n), O(n)]
__653. Two Sum IV - Input is a BST - 60 min [O(n), O(n)]
13. Roman to Integer - 12 min [O(n), O(alphabet)]
14. Longest Common Prefix - 5 min [O(n), O(1)]
26. Remove Duplicates from Sorted Array - 10 min [O(n), O(1)]
66. Plus One - 10 min [O(n), O(n)]
69. Sqrt(x) - 20 min [O(n), O(1)]
744. Find Smallest Letter Greater Than Target - 10 min [O(log n), O(1)]
34. Find First and Last Position of Element in Sorted Array - 18 min [O(log n), O(1)]
977. Squares of a Sorted Array - 0 min [O(n log n), O(n)] / 20 min [O(n), O(1)]
_189. Rotate Array - 10 min [O(n*k), O(1)] / 15 min [O(n), O(n)] / 40 min (googled) [O(n), O(1)]
_441. Arranging Coins - 5 min [O(log n), O(1)] / (googled) [O(log n), O(1)]
__1539. Kth Missing Positive Number - 40 min (googled) [O(n), O(n+k)] / 20 min (googled) [O(log n), O(1)]
344. Reverse String - 2 min [O(n), O(1)]
557. Reverse Words in a String III - 12 min [O(n), O(n)]
19. Remove Nth Node From End of List - 12 min (two passes)[O(n), O(1)] / 50 min (one pass) [O(n), O(1)]
1608. Special Array With X Elements Greater Than or Equal X - 35 min [O(n log n), O(sorting)]
3. Longest Substring Without Repeating Characters - 23 min [O(n), O(n)]
_567. Permutation in String - 40 min (with hints) [O(n), O(alphabet)] >> 12 min
_1351. Count Negative Numbers in a Sorted Matrix - 10 min [O(n*m), O(1)] / 20 min [O(n + m), O(1)]
__1071. Greatest Common Divisor of Strings - 20 min [O(n), O(n)] / 40 min (math solution) [O(n), O(1)]
695. Max Area of Island - 35 min [O(n), O(n)]
1337. The K Weakest Rows in a Matrix - 10 min [O(n), O(n)] / 60 min [O(n*log m + n*log k), O(k)]
_1346. Check If N and Its Double Exist - 2 min [O(n^2), O(1)] / 20 min [O(n), O(n)]
_6. Zigzag Conversion - 50 min [O(n), O(1)]
633. Sum of Square Numbers - 10 min [O(n), O(1)]
617. Merge Two Binary Trees - 6 min [O(n + m),O(1)]
116. Populating Next Right Pointers in Each Node - 15 min [O(n), O(n)]
_1855. Maximum Distance Between a Pair of Values - 40 min [O(n+m), O(1)]
_33. Search in Rotated Sorted Array - 50 min [O(logn), O(1)]
_542. 01 Matrix - 50 min [O(m*n), O(1)]
994. Rotting Oranges - 50 min [O(m*n), O(1)]
153. Find Minimum in Rotated Sorted Array - 15 min [O(logn), O(1)]
27. Remove Element - 15 min [O(n), O(1)]
1137. N-th Tribonacci Number - 2 min [O(n), O(1)]
1470. Shuffle the Array - 4 min [O(n), O(1)]
77. Combinations - 25 min [O(n*k), O(k)]
_46. Permutations - 25 min [O(n!), O(1)]
784. Letter Case Permutation - 17 min [O(2*letters), O(1)]
_136. Single Number - 5 min [O(n), O(n)] / 40 min [O(n), O(1)]
__904. Fruit Into Baskets - 40 min [O(n), O(1)]
45. Jump Game II - 32 min [O(n), O(1)]
__2306. Naming a Company - 80 min [O(n*alphabet), O(alphabet*n)]
198. House Robber - 4 min [O(n), O(1)]
_120. Triangle - 30 min [O(m*n), O(m*n)] / 30 min [O(m*n), O(1)]
_231. Power of Two - 10 min [O(log n), O(1)] / 10 min [O(1), O(1)]
__190. Reverse Bits - 20 min [O(1), O(1)]
__1162. As Far from Land as Possible - 80 min dp [O(r*c), O(r*c)] / dp [O(r*c), O(1)] / Multi-source BFS [O(r*c), O(r*c)]
__213. House Robber II - 60 min [O(n), O(1)]
__740. Delete and Earn - 80 min [O(n), O(n)]
_55. Jump Game - 20 min [O(n), O(n)] / 5 min [O(n), O(1)]
__1129. Shortest Path with Alternating Colors - 80 min [O(n), O(n)]
__918. Maximum Sum Circular Subarray - 80 min [O(n), O(1)]
__2477. Minimum Fuel Cost to Report to the Capital - 60 min [O(n), O(n)]
__152. Maximum Product Subarray - 50 min [O(n), O(1)]
__1567. Maximum Length of Subarray With Positive Product - 40 min [O(n), O(1)]
_1014. Best Sightseeing Pair - 45 min (hint) [O(n), O(1)]
122. Best Time to Buy and Sell Stock II - 8 min [O(n), O(1)]
__309. Best Time to Buy and Sell Stock with Cooldown - 100 min [O(n^2), O(n)] / 20 min [O(n), O(n)]
67. Add Binary - 20 min [O(n), O(1)] / 20 min (much more clean code) [O(n), O(1)]
__714. Best Time to Buy and Sell Stock with Transaction Fee - 60 min [O(n), O(n)]
__139. Word Break - 80 min [O(n^3), O(n)]
_413. Arithmetic Slices - 8 min [O(n^2), O(1)] / 30 min [O(n), O(n)] / 10 min [O(n), O(1)]
__91. Decode Ways - 80 min [O(n), O(n)]
989. Add to Array-Form of Integer - 15 min [O(n), O(1)]
__264. Ugly Number II - 30 min [O(n), O(1)]
__96. Unique Binary Search Trees - 35 min [O(n), O(n)]
__42. Trapping Rain Water - 65 min [O(n), O(n)]
119. Pascal's Triangle II - 3 min [O(n^2), O(n^2)] / 8 min [O(n^2), O(1)]
783. Minimum Distance Between BST Nodes - 30 min [O(n), O(h)] / 10 min (cleaner) [O(n), O(h)]
931. Minimum Falling Path Sum - 8 min [O(m*n), O(1)]
1314. Matrix Block Sum - 20 min [O(n^2 OR n^4), O(1)]
304. Range Sum Query 2D - Immutable - 25 min [O(1), O(1)] {time complexity is O(1) according to description of the problem}
103. Binary Tree Zigzag Level Order Traversal - 20 min [O(n), O(n)]
63. Unique Paths II - 18 min [O(m*n), O(1)]
64. Minimum Path Sum - 5 min [O(m*n), O(1)]
221. Maximal Square - 30 min [O(m*n), O(m*n)]
540. Single Element in a Sorted Array - 15 min [O(logn), O(1)]
__5. Longest Palindromic Substring - 30 min [O(n^2), O(1)]
__516. Longest Palindromic Subsequence - 30 min [O(m*n), O(m*n)]
__1011. Capacity To Ship Packages Within D Days - 30 min [O(nlogn), O(1)]
__300. Longest Increasing Subsequence - 30 min [O(n^2), O(n)]
__376. Wiggle Subsequence - 20 min [O(n), O(n)]
__502. IPO - 30 min (spied) [O(nlogn), O(n+k)]
__1675. Minimize Deviation in Array - 30 min [O(nlogn), O(n)]
_72. Edit Distance - 35 min [O(m*n), O(m*n)]
X_427. Construct Quad Tree - 20 min
__652. Find Duplicate Subtrees - 20 min [O(n), O(n)]
_912. Sort an Array - 5 min (stl)
443. String Compression - 30 min [O(n), O(1)]
